La classe `Sell` est conçue pour gérer les informations de vente. Voici une description détaillée de ses propriétés 
et méthodes :

### Propriétés :
- `id` : Identifiant unique de la vente, correspondant au `_id` dans MongoDB.
- `date` : La date de la vente.
- `client_id` : Identifiant du client associé à la vente.
- `prescription_ids` : Liste des identifiants de prescriptions associées à la vente.

### Propriétés Dynamiques (`@property`) :
- `drugs` : Retourne une liste des noms de médicaments associés à la vente, basée sur les identifiants 
de prescriptions.
- `total` : Calcule le prix total de la vente en additionnant le prix de vente de chaque médicament.

### Méthodes :
- `from_dict(data_dict)` : Méthode statique pour créer une instance de `Sell` à partir d'un dictionnaire. 
Utilisée pour la conversion des documents MongoDB en objets Python.
- `to_dict()` : Convertit l'instance en un dictionnaire, adapté pour l'insertion ou la mise à jour des 
données dans MongoDB.
- `create()` : Ajoute une nouvelle vente dans la base de données après avoir vérifié la validité des 
prescriptions associées. Elle met également à jour le statut et le nombre de délivrances des prescriptions, 
ainsi que le stock des médicaments vendus.
- `get_all_sells()` : Méthode de classe pour récupérer toutes les ventes de la base de données.
- `get_sells_by_client_id(client_id)` : Méthode statique pour trouver toutes les ventes associées à un 
identifiant de client spécifique.
- `get_sell_by_id(sell_id)` : Méthode statique pour trouver une vente spécifique par son identifiant.

### Processus de Création de Vente (`create`) :
- Vérifie chaque prescription associée pour s'assurer qu'elle n'est pas expirée.
- Incrémente le nombre de délivrances (`given_nb`) pour chaque prescription.
- Calcule le total de la vente.
- Insère le document de vente dans la base de données MongoDB.
- Met à jour la liste des identifiants de vente (`sell_ids`) dans le document du client.
- Met à jour le stock des médicaments vendus dans la base de données.

